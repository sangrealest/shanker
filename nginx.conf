user  www www;
worker_processes  4;
worker_cpu_affinity 0001 0010 0100 1000;
worker_rlimit_nofile 8192;


error_log  /var/log/nginx/error.log;
#error_log  /var/log/nginx/error.log  notice;
#error_log  /var/log/nginx/error.log  info;

pid        /run/nginx.pid;


events {
    use epoll;
    worker_connections  2048;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    # tcp_nopush     on;
    tcp_nodelay     on;

    keepalive_timeout  65;
    types_hash_max_size 2048;
    server_tokens off;

  # gzip压缩功能设置
    gzip on;
    gzip_min_length 1k;
    gzip_buffers    4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 6;
    gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;
    gzip_vary on;

  # http_proxy 设置
    client_max_body_size   1m;
    client_body_buffer_size   128k;
    proxy_connect_timeout   75;
    proxy_send_timeout   75;
    proxy_read_timeout   75;
    proxy_buffer_size   4k;
    proxy_buffers   4 32k;
    proxy_busy_buffers_size   64k;
    proxy_temp_file_write_size  64k;
  #  proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;
  #Cache seeting
    proxy_cache_path /usr/local/nginx/proxy_temp levels=1:2 keys_zone=my_cache:100m max_size=10g inactive=60m use_temp_path=off;

  #set frontend
    upstream frontend {
            server 127.0.0.1:80;
    }
  # 设定负载均衡后台服务器列表 
    upstream  backend  { 
              ip_hash; 
              server   192.168.10.100:8080 weight=1 max_fails=2 fail_timeout=30s ;  
              server   192.168.10.101:8080 weight=1 max_fails=2 fail_timeout=30s ;  
    }

  # 很重要的虚拟主机配置
    server {
        listen       80;
        server_name  example.com;
        index  index.jsp index.html index.htm;

        charset utf-8;
        access_log  /var/log/nginx/host.access.log  main;

        if ($request_method !~ ^(GET|HEAD|POST|OPTIONS)$){
            return 444;
        } 
        #对 / 所有做负载均衡+反向代理
        location / {
            root   /data/www;
            proxy_pass        http://backend;  
            proxy_redirect off;
            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header  Host  $host;
            proxy_set_header  X-Real-IP  $remote_addr;  
            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;

        }

        #静态文件，nginx自己处理，不去backend请求tomcat
        location  ~* /download/ {  
            root /data/dowload;  
            proxy_cache_path my_cache;

        }
        location ~ .*\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$   
        {   
            #root /data/static;   
            proxy_pass http://frontend;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_cache_path my_cache;
            proxy_cache_valid 200 304 12h;
            proxy_cache_valid 301 302 1m;
            proxy_cache_valid any 1m;
            proxy_cache_key $host$uri$is_args$args;
            expires      30; 
        }
    #purge cache
        location ~ /purge(/.*){
        allow 127.0.0.1;
        deny all;
        proxy_cache_purge my_cache $host$1$is_args$args;
        }

        location /nginx_status {
            stub_status on;
            access_log off;
            allow 192.168.10.0/24;
            deny all;
        }

        location ~ ^/(WEB-INF)/ {   
            deny all;   
        }
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

  ## 其它虚拟主机，server 指令开始
}


